// WARNING: This file has automatically been generated on Fri, 20 May 2022 19:39:49 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package cuse

/*
#cgo pkg-config: fuse3
#include <cuse_lowlevel.h>
#include <fuse_lowlevel.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocStructCuseInfoMemory allocates memory for type C.struct_cuse_info in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructCuseInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructCuseInfoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructCuseInfoValue = unsafe.Sizeof([1]C.struct_cuse_info{})

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// allocPCharMemory allocates memory for type *C.char in C.
// The caller is responsible for freeing the this memory via C.free.
func allocPCharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfPCharValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfPCharValue = unsafe.Sizeof([1]*C.char{})

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackSString transforms a sliced Go data structure into plain C format.
func unpackSString(x []string) (unpacked **C.char, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPCharMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]*C.char)(unsafe.Pointer(h0))
	for i0 := range x {
		v0[i0], _ = unpackPCharString(x[i0])
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (**C.char)(h.Data)
	return
}

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// packSString reads sliced Go data structure out from plain C format.
func packSString(v []string, ptr0 **C.char) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.char)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = packPCharString(ptr1)
	}
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Info) Ref() *C.struct_cuse_info {
	if x == nil {
		return nil
	}
	return x.ref30ec17cc
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Info) Free() {
	if x != nil && x.allocs30ec17cc != nil {
		x.allocs30ec17cc.(*cgoAllocMap).Free()
		x.ref30ec17cc = nil
	}
}

// NewInfoRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewInfoRef(ref unsafe.Pointer) *Info {
	if ref == nil {
		return nil
	}
	obj := new(Info)
	obj.ref30ec17cc = (*C.struct_cuse_info)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Info) PassRef() (*C.struct_cuse_info, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref30ec17cc != nil {
		return x.ref30ec17cc, nil
	}
	mem30ec17cc := allocStructCuseInfoMemory(1)
	ref30ec17cc := (*C.struct_cuse_info)(mem30ec17cc)
	allocs30ec17cc := new(cgoAllocMap)
	allocs30ec17cc.Add(mem30ec17cc)

	var cdev_major_allocs *cgoAllocMap
	ref30ec17cc.dev_major, cdev_major_allocs = (C.uint)(x.devMajor), cgoAllocsUnknown
	allocs30ec17cc.Borrow(cdev_major_allocs)

	var cdev_minor_allocs *cgoAllocMap
	ref30ec17cc.dev_minor, cdev_minor_allocs = (C.uint)(x.devMinor), cgoAllocsUnknown
	allocs30ec17cc.Borrow(cdev_minor_allocs)

	var cdev_info_argc_allocs *cgoAllocMap
	ref30ec17cc.dev_info_argc, cdev_info_argc_allocs = (C.uint)(x.devInfoArgc), cgoAllocsUnknown
	allocs30ec17cc.Borrow(cdev_info_argc_allocs)

	var cdev_info_argv_allocs *cgoAllocMap
	ref30ec17cc.dev_info_argv, cdev_info_argv_allocs = unpackSString(x.devInfoArgv)
	allocs30ec17cc.Borrow(cdev_info_argv_allocs)

	var cflags_allocs *cgoAllocMap
	ref30ec17cc.flags, cflags_allocs = (C.uint)(x.flags), cgoAllocsUnknown
	allocs30ec17cc.Borrow(cflags_allocs)

	x.ref30ec17cc = ref30ec17cc
	x.allocs30ec17cc = allocs30ec17cc
	return ref30ec17cc, allocs30ec17cc

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Info) PassValue() (C.struct_cuse_info, *cgoAllocMap) {
	if x.ref30ec17cc != nil {
		return *x.ref30ec17cc, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Info) Deref() {
	if x.ref30ec17cc == nil {
		return
	}
	x.devMajor = (uint32)(x.ref30ec17cc.dev_major)
	x.devMinor = (uint32)(x.ref30ec17cc.dev_minor)
	x.devInfoArgc = (uint32)(x.ref30ec17cc.dev_info_argc)
	packSString(x.devInfoArgv, x.ref30ec17cc.dev_info_argv)
	x.flags = (uint32)(x.ref30ec17cc.flags)
}

// allocStructCuseLowlevelOpsMemory allocates memory for type C.struct_cuse_lowlevel_ops in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructCuseLowlevelOpsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructCuseLowlevelOpsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructCuseLowlevelOpsValue = unsafe.Sizeof([1]C.struct_cuse_lowlevel_ops{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *LowlevelOps) Ref() *C.struct_cuse_lowlevel_ops {
	if x == nil {
		return nil
	}
	return x.refa7a7b71f
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *LowlevelOps) Free() {
	if x != nil && x.allocsa7a7b71f != nil {
		x.allocsa7a7b71f.(*cgoAllocMap).Free()
		x.refa7a7b71f = nil
	}
}

// NewLowlevelOpsRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewLowlevelOpsRef(ref unsafe.Pointer) *LowlevelOps {
	if ref == nil {
		return nil
	}
	obj := new(LowlevelOps)
	obj.refa7a7b71f = (*C.struct_cuse_lowlevel_ops)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *LowlevelOps) PassRef() (*C.struct_cuse_lowlevel_ops, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refa7a7b71f != nil {
		return x.refa7a7b71f, nil
	}
	mema7a7b71f := allocStructCuseLowlevelOpsMemory(1)
	refa7a7b71f := (*C.struct_cuse_lowlevel_ops)(mema7a7b71f)
	allocsa7a7b71f := new(cgoAllocMap)
	allocsa7a7b71f.Add(mema7a7b71f)

	var cinit_allocs *cgoAllocMap
	refa7a7b71f.init, cinit_allocs = x.init.PassRef()
	allocsa7a7b71f.Borrow(cinit_allocs)

	var cinit_done_allocs *cgoAllocMap
	refa7a7b71f.init_done, cinit_done_allocs = x.initDone.PassRef()
	allocsa7a7b71f.Borrow(cinit_done_allocs)

	var cdestroy_allocs *cgoAllocMap
	refa7a7b71f.destroy, cdestroy_allocs = x.destroy.PassRef()
	allocsa7a7b71f.Borrow(cdestroy_allocs)

	var copen_allocs *cgoAllocMap
	refa7a7b71f.open, copen_allocs = x.open.PassRef()
	allocsa7a7b71f.Borrow(copen_allocs)

	var cread_allocs *cgoAllocMap
	refa7a7b71f.read, cread_allocs = x.read.PassRef()
	allocsa7a7b71f.Borrow(cread_allocs)

	var cwrite_allocs *cgoAllocMap
	refa7a7b71f.write, cwrite_allocs = x.write.PassRef()
	allocsa7a7b71f.Borrow(cwrite_allocs)

	var cflush_allocs *cgoAllocMap
	refa7a7b71f.flush, cflush_allocs = x.flush.PassRef()
	allocsa7a7b71f.Borrow(cflush_allocs)

	var crelease_allocs *cgoAllocMap
	refa7a7b71f.release, crelease_allocs = x.release.PassRef()
	allocsa7a7b71f.Borrow(crelease_allocs)

	var cfsync_allocs *cgoAllocMap
	refa7a7b71f.fsync, cfsync_allocs = x.fsync.PassRef()
	allocsa7a7b71f.Borrow(cfsync_allocs)

	var cioctl_allocs *cgoAllocMap
	refa7a7b71f.ioctl, cioctl_allocs = x.ioctl.PassRef()
	allocsa7a7b71f.Borrow(cioctl_allocs)

	var cpoll_allocs *cgoAllocMap
	refa7a7b71f.poll, cpoll_allocs = x.poll.PassRef()
	allocsa7a7b71f.Borrow(cpoll_allocs)

	x.refa7a7b71f = refa7a7b71f
	x.allocsa7a7b71f = allocsa7a7b71f
	return refa7a7b71f, allocsa7a7b71f

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x LowlevelOps) PassValue() (C.struct_cuse_lowlevel_ops, *cgoAllocMap) {
	if x.refa7a7b71f != nil {
		return *x.refa7a7b71f, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *LowlevelOps) Deref() {
	if x.refa7a7b71f == nil {
		return
	}
	x.init = NewRef(unsafe.Pointer(x.refa7a7b71f.init))
	x.initDone = NewRef(unsafe.Pointer(x.refa7a7b71f.init_done))
	x.destroy = NewRef(unsafe.Pointer(x.refa7a7b71f.destroy))
	x.open = NewRef(unsafe.Pointer(x.refa7a7b71f.open))
	x.read = NewRef(unsafe.Pointer(x.refa7a7b71f.read))
	x.write = NewRef(unsafe.Pointer(x.refa7a7b71f.write))
	x.flush = NewRef(unsafe.Pointer(x.refa7a7b71f.flush))
	x.release = NewRef(unsafe.Pointer(x.refa7a7b71f.release))
	x.fsync = NewRef(unsafe.Pointer(x.refa7a7b71f.fsync))
	x.ioctl = NewRef(unsafe.Pointer(x.refa7a7b71f.ioctl))
	x.poll = NewRef(unsafe.Pointer(x.refa7a7b71f.poll))
}

// allocStructFuseConnInfoMemory allocates memory for type C.struct_fuse_conn_info in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructFuseConnInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructFuseConnInfoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructFuseConnInfoValue = unsafe.Sizeof([1]C.struct_fuse_conn_info{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *ConnInfo) Ref() *C.struct_fuse_conn_info {
	if x == nil {
		return nil
	}
	return x.ref2dad4d28
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *ConnInfo) Free() {
	if x != nil && x.allocs2dad4d28 != nil {
		x.allocs2dad4d28.(*cgoAllocMap).Free()
		x.ref2dad4d28 = nil
	}
}

// NewConnInfoRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewConnInfoRef(ref unsafe.Pointer) *ConnInfo {
	if ref == nil {
		return nil
	}
	obj := new(ConnInfo)
	obj.ref2dad4d28 = (*C.struct_fuse_conn_info)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *ConnInfo) PassRef() (*C.struct_fuse_conn_info, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref2dad4d28 != nil {
		return x.ref2dad4d28, nil
	}
	mem2dad4d28 := allocStructFuseConnInfoMemory(1)
	ref2dad4d28 := (*C.struct_fuse_conn_info)(mem2dad4d28)
	allocs2dad4d28 := new(cgoAllocMap)
	allocs2dad4d28.Add(mem2dad4d28)

	var cproto_major_allocs *cgoAllocMap
	ref2dad4d28.proto_major, cproto_major_allocs = (C.uint)(x.protoMajor), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cproto_major_allocs)

	var cproto_minor_allocs *cgoAllocMap
	ref2dad4d28.proto_minor, cproto_minor_allocs = (C.uint)(x.protoMinor), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cproto_minor_allocs)

	var cmax_write_allocs *cgoAllocMap
	ref2dad4d28.max_write, cmax_write_allocs = (C.uint)(x.maxWrite), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cmax_write_allocs)

	var cmax_read_allocs *cgoAllocMap
	ref2dad4d28.max_read, cmax_read_allocs = (C.uint)(x.maxRead), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cmax_read_allocs)

	var cmax_readahead_allocs *cgoAllocMap
	ref2dad4d28.max_readahead, cmax_readahead_allocs = (C.uint)(x.maxReadahead), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cmax_readahead_allocs)

	var ccapable_allocs *cgoAllocMap
	ref2dad4d28.capable, ccapable_allocs = (C.uint)(x.capable), cgoAllocsUnknown
	allocs2dad4d28.Borrow(ccapable_allocs)

	var cwant_allocs *cgoAllocMap
	ref2dad4d28.want, cwant_allocs = (C.uint)(x.want), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cwant_allocs)

	var cmax_background_allocs *cgoAllocMap
	ref2dad4d28.max_background, cmax_background_allocs = (C.uint)(x.maxBackground), cgoAllocsUnknown
	allocs2dad4d28.Borrow(cmax_background_allocs)

	var ccongestion_threshold_allocs *cgoAllocMap
	ref2dad4d28.congestion_threshold, ccongestion_threshold_allocs = (C.uint)(x.congestionThreshold), cgoAllocsUnknown
	allocs2dad4d28.Borrow(ccongestion_threshold_allocs)

	var ctime_gran_allocs *cgoAllocMap
	ref2dad4d28.time_gran, ctime_gran_allocs = (C.uint)(x.timeGran), cgoAllocsUnknown
	allocs2dad4d28.Borrow(ctime_gran_allocs)

	var creserved_allocs *cgoAllocMap
	ref2dad4d28.reserved, creserved_allocs = *(*[22]C.uint)(unsafe.Pointer(&x.reserved)), cgoAllocsUnknown
	allocs2dad4d28.Borrow(creserved_allocs)

	x.ref2dad4d28 = ref2dad4d28
	x.allocs2dad4d28 = allocs2dad4d28
	return ref2dad4d28, allocs2dad4d28

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x ConnInfo) PassValue() (C.struct_fuse_conn_info, *cgoAllocMap) {
	if x.ref2dad4d28 != nil {
		return *x.ref2dad4d28, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *ConnInfo) Deref() {
	if x.ref2dad4d28 == nil {
		return
	}
	x.protoMajor = (uint32)(x.ref2dad4d28.proto_major)
	x.protoMinor = (uint32)(x.ref2dad4d28.proto_minor)
	x.maxWrite = (uint32)(x.ref2dad4d28.max_write)
	x.maxRead = (uint32)(x.ref2dad4d28.max_read)
	x.maxReadahead = (uint32)(x.ref2dad4d28.max_readahead)
	x.capable = (uint32)(x.ref2dad4d28.capable)
	x.want = (uint32)(x.ref2dad4d28.want)
	x.maxBackground = (uint32)(x.ref2dad4d28.max_background)
	x.congestionThreshold = (uint32)(x.ref2dad4d28.congestion_threshold)
	x.timeGran = (uint32)(x.ref2dad4d28.time_gran)
	x.reserved = *(*[22]uint32)(unsafe.Pointer(&x.ref2dad4d28.reserved))
}

// Ref returns a reference to C object as it is.
func (x *ConnInfoOpts) Ref() *C.struct_fuse_conn_info_opts {
	if x == nil {
		return nil
	}
	return (*C.struct_fuse_conn_info_opts)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *ConnInfoOpts) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewConnInfoOptsRef converts the C object reference into a raw struct reference without wrapping.
func NewConnInfoOptsRef(ref unsafe.Pointer) *ConnInfoOpts {
	return (*ConnInfoOpts)(ref)
}

// NewConnInfoOpts allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewConnInfoOpts() *ConnInfoOpts {
	return (*ConnInfoOpts)(allocStructFuseConnInfoOptsMemory(1))
}

// allocStructFuseConnInfoOptsMemory allocates memory for type C.struct_fuse_conn_info_opts in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructFuseConnInfoOptsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructFuseConnInfoOptsValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructFuseConnInfoOptsValue = unsafe.Sizeof([1]C.struct_fuse_conn_info_opts{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *ConnInfoOpts) PassRef() *C.struct_fuse_conn_info_opts {
	if x == nil {
		x = (*ConnInfoOpts)(allocStructFuseConnInfoOptsMemory(1))
	}
	return (*C.struct_fuse_conn_info_opts)(unsafe.Pointer(x))
}

// allocStructFuseFileInfoMemory allocates memory for type C.struct_fuse_file_info in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructFuseFileInfoMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructFuseFileInfoValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructFuseFileInfoValue = unsafe.Sizeof([1]C.struct_fuse_file_info{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *FileInfo) Ref() *C.struct_fuse_file_info {
	if x == nil {
		return nil
	}
	return x.ref5c0de00a
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *FileInfo) Free() {
	if x != nil && x.allocs5c0de00a != nil {
		x.allocs5c0de00a.(*cgoAllocMap).Free()
		x.ref5c0de00a = nil
	}
}

// NewFileInfoRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFileInfoRef(ref unsafe.Pointer) *FileInfo {
	if ref == nil {
		return nil
	}
	obj := new(FileInfo)
	obj.ref5c0de00a = (*C.struct_fuse_file_info)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *FileInfo) PassRef() (*C.struct_fuse_file_info, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref5c0de00a != nil {
		return x.ref5c0de00a, nil
	}
	mem5c0de00a := allocStructFuseFileInfoMemory(1)
	ref5c0de00a := (*C.struct_fuse_file_info)(mem5c0de00a)
	allocs5c0de00a := new(cgoAllocMap)
	allocs5c0de00a.Add(mem5c0de00a)

	var cflags_allocs *cgoAllocMap
	ref5c0de00a.flags, cflags_allocs = (C.int)(x.flags), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cflags_allocs)

	var cwritepage_allocs *cgoAllocMap
	ref5c0de00a.writepage, cwritepage_allocs = (C.uint)(x.writepage), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cwritepage_allocs)

	var cdirect_io_allocs *cgoAllocMap
	ref5c0de00a.direct_io, cdirect_io_allocs = (C.uint)(x.directIo), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cdirect_io_allocs)

	var ckeep_cache_allocs *cgoAllocMap
	ref5c0de00a.keep_cache, ckeep_cache_allocs = (C.uint)(x.keepCache), cgoAllocsUnknown
	allocs5c0de00a.Borrow(ckeep_cache_allocs)

	var cflush_allocs *cgoAllocMap
	ref5c0de00a.flush, cflush_allocs = (C.uint)(x.flush), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cflush_allocs)

	var cnonseekable_allocs *cgoAllocMap
	ref5c0de00a.nonseekable, cnonseekable_allocs = (C.uint)(x.nonseekable), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cnonseekable_allocs)

	var cflock_release_allocs *cgoAllocMap
	ref5c0de00a.flock_release, cflock_release_allocs = (C.uint)(x.flockRelease), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cflock_release_allocs)

	var ccache_readdir_allocs *cgoAllocMap
	ref5c0de00a.cache_readdir, ccache_readdir_allocs = (C.uint)(x.cacheReaddir), cgoAllocsUnknown
	allocs5c0de00a.Borrow(ccache_readdir_allocs)

	var cpadding_allocs *cgoAllocMap
	ref5c0de00a.padding, cpadding_allocs = (C.uint)(x.padding), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cpadding_allocs)

	var cpadding2_allocs *cgoAllocMap
	ref5c0de00a.padding2, cpadding2_allocs = (C.uint)(x.padding2), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cpadding2_allocs)

	var cfh_allocs *cgoAllocMap
	ref5c0de00a.fh, cfh_allocs = (C.uint64_t)(x.fh), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cfh_allocs)

	var clock_owner_allocs *cgoAllocMap
	ref5c0de00a.lock_owner, clock_owner_allocs = (C.uint64_t)(x.lockOwner), cgoAllocsUnknown
	allocs5c0de00a.Borrow(clock_owner_allocs)

	var cpoll_events_allocs *cgoAllocMap
	ref5c0de00a.poll_events, cpoll_events_allocs = (C.uint32_t)(x.pollEvents), cgoAllocsUnknown
	allocs5c0de00a.Borrow(cpoll_events_allocs)

	x.ref5c0de00a = ref5c0de00a
	x.allocs5c0de00a = allocs5c0de00a
	return ref5c0de00a, allocs5c0de00a

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x FileInfo) PassValue() (C.struct_fuse_file_info, *cgoAllocMap) {
	if x.ref5c0de00a != nil {
		return *x.ref5c0de00a, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *FileInfo) Deref() {
	if x.ref5c0de00a == nil {
		return
	}
	x.flags = (int32)(x.ref5c0de00a.flags)
	x.writepage = (uint32)(x.ref5c0de00a.writepage)
	x.directIo = (uint32)(x.ref5c0de00a.direct_io)
	x.keepCache = (uint32)(x.ref5c0de00a.keep_cache)
	x.flush = (uint32)(x.ref5c0de00a.flush)
	x.nonseekable = (uint32)(x.ref5c0de00a.nonseekable)
	x.flockRelease = (uint32)(x.ref5c0de00a.flock_release)
	x.cacheReaddir = (uint32)(x.ref5c0de00a.cache_readdir)
	x.padding = (uint32)(x.ref5c0de00a.padding)
	x.padding2 = (uint32)(x.ref5c0de00a.padding2)
	x.fh = (uint32)(x.ref5c0de00a.fh)
	x.lockOwner = (uint32)(x.ref5c0de00a.lock_owner)
	x.pollEvents = (uint32)(x.ref5c0de00a.poll_events)
}

// Ref returns a reference to C object as it is.
func (x *Pollhandle) Ref() *C.struct_fuse_pollhandle {
	if x == nil {
		return nil
	}
	return (*C.struct_fuse_pollhandle)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Pollhandle) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewPollhandleRef converts the C object reference into a raw struct reference without wrapping.
func NewPollhandleRef(ref unsafe.Pointer) *Pollhandle {
	return (*Pollhandle)(ref)
}

// NewPollhandle allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewPollhandle() *Pollhandle {
	return (*Pollhandle)(allocStructFusePollhandleMemory(1))
}

// allocStructFusePollhandleMemory allocates memory for type C.struct_fuse_pollhandle in C.
// The caller is responsible for freeing the this memory via C.free.
func allocStructFusePollhandleMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfStructFusePollhandleValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfStructFusePollhandleValue = unsafe.Sizeof([1]C.struct_fuse_pollhandle{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Pollhandle) PassRef() *C.struct_fuse_pollhandle {
	if x == nil {
		x = (*Pollhandle)(allocStructFusePollhandleMemory(1))
	}
	return (*C.struct_fuse_pollhandle)(unsafe.Pointer(x))
}

// unpackArgSSByte transforms a sliced Go data structure into plain C format.
func unpackArgSSByte(x [][]byte) (unpacked **C.char, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocPCharMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]*C.char)(unsafe.Pointer(h0))
	for i0 := range x {
		h := (*sliceHeader)(unsafe.Pointer(&x[i0]))
		v0[i0] = (*C.char)(h.Data)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (**C.char)(h.Data)
	return
}

// packSSByte reads sliced Go data structure out from plain C format.
func packSSByte(v [][]byte, ptr0 **C.char) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.char)(unsafe.Pointer(ptr0)))[i0]
		hxfc4425b := (*sliceHeader)(unsafe.Pointer(&v[i0]))
		hxfc4425b.Data = unsafe.Pointer(ptr1)
		hxfc4425b.Cap = 0x7fffffff
		// hxfc4425b.Len = ?
	}
}

// unpackArgSInfo transforms a sliced Go data structure into plain C format.
func unpackArgSInfo(x []Info) (unpacked *C.struct_cuse_info, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocStructCuseInfoMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.struct_cuse_info)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.struct_cuse_info)(h.Data)
	return
}

// packSInfo reads sliced Go data structure out from plain C format.
func packSInfo(v []Info, ptr0 *C.struct_cuse_info) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfStructCuseInfoValue]C.struct_cuse_info)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewInfoRef(unsafe.Pointer(&ptr1))
	}
}

// unpackArgSLowlevelOps transforms a sliced Go data structure into plain C format.
func unpackArgSLowlevelOps(x []LowlevelOps) (unpacked *C.struct_cuse_lowlevel_ops, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocStructCuseLowlevelOpsMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.struct_cuse_lowlevel_ops)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.struct_cuse_lowlevel_ops)(h.Data)
	return
}

// packSLowlevelOps reads sliced Go data structure out from plain C format.
func packSLowlevelOps(v []LowlevelOps, ptr0 *C.struct_cuse_lowlevel_ops) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfStructCuseLowlevelOpsValue]C.struct_cuse_lowlevel_ops)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewLowlevelOpsRef(unsafe.Pointer(&ptr1))
	}
}

// copyPStructFusePollhandleBytes copies the data from Go slice as *C.struct_fuse_pollhandle.
func copyPStructFusePollhandleBytes(slice *sliceHeader) (*C.struct_fuse_pollhandle, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfStructFusePollhandleValue) * slice.Len,
		Cap:  int(sizeOfStructFusePollhandleValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.struct_fuse_pollhandle)(mem0), allocs
}
