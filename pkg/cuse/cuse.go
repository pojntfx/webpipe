// WARNING: This file has automatically been generated on Thu, 19 May 2022 22:32:28 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package cuse

/*
#cgo pkg-config: fuse3
#include <cuse_lowlevel.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// LowlevelNew function as declared in fuse3/cuse_lowlevel.h:68
func LowlevelNew(args []Args, ci []Info, clop []LowlevelOps, userdata unsafe.Pointer) *Session {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	cci, cciAllocMap := unpackArgSInfo(ci)
	cclop, cclopAllocMap := unpackArgSLowlevelOps(clop)
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.cuse_lowlevel_new(cargs, cci, cclop, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	packSLowlevelOps(clop, cclop)
	runtime.KeepAlive(cclopAllocMap)
	packSInfo(ci, cci)
	runtime.KeepAlive(cciAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := *(**Session)(unsafe.Pointer(&__ret))
	return __v
}

// LowlevelSetup function as declared in fuse3/cuse_lowlevel.h:73
func LowlevelSetup(argc int32, argv [][]byte, ci []Info, clop []LowlevelOps, multithreaded []int32, userdata unsafe.Pointer) *Session {
	cargc, cargcAllocMap := (C.int)(argc), cgoAllocsUnknown
	cargv, cargvAllocMap := unpackArgSSByte(argv)
	cci, cciAllocMap := unpackArgSInfo(ci)
	cclop, cclopAllocMap := unpackArgSLowlevelOps(clop)
	cmultithreaded, cmultithreadedAllocMap := copyPIntBytes((*sliceHeader)(unsafe.Pointer(&multithreaded)))
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.cuse_lowlevel_setup(cargc, cargv, cci, cclop, cmultithreaded, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	runtime.KeepAlive(cmultithreadedAllocMap)
	packSLowlevelOps(clop, cclop)
	runtime.KeepAlive(cclopAllocMap)
	packSInfo(ci, cci)
	runtime.KeepAlive(cciAllocMap)
	packSSByte(argv, cargv)
	runtime.KeepAlive(cargvAllocMap)
	runtime.KeepAlive(cargcAllocMap)
	__v := *(**Session)(unsafe.Pointer(&__ret))
	return __v
}

// LowlevelTeardown function as declared in fuse3/cuse_lowlevel.h:78
func LowlevelTeardown(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.cuse_lowlevel_teardown(cse)
	runtime.KeepAlive(cseAllocMap)
}

// LowlevelMain function as declared in fuse3/cuse_lowlevel.h:80
func LowlevelMain(argc int32, argv [][]byte, ci []Info, clop []LowlevelOps, userdata unsafe.Pointer) int32 {
	cargc, cargcAllocMap := (C.int)(argc), cgoAllocsUnknown
	cargv, cargvAllocMap := unpackArgSSByte(argv)
	cci, cciAllocMap := unpackArgSInfo(ci)
	cclop, cclopAllocMap := unpackArgSLowlevelOps(clop)
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.cuse_lowlevel_main(cargc, cargv, cci, cclop, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	packSLowlevelOps(clop, cclop)
	runtime.KeepAlive(cclopAllocMap)
	packSInfo(ci, cci)
	runtime.KeepAlive(cciAllocMap)
	packSSByte(argv, cargv)
	runtime.KeepAlive(cargvAllocMap)
	runtime.KeepAlive(cargcAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyErr function as declared in fuse3/fuse_lowlevel.h:1271
func ReplyErr(req Req, err int32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cerr, cerrAllocMap := (C.int)(err), cgoAllocsUnknown
	__ret := C.fuse_reply_err(creq, cerr)
	runtime.KeepAlive(cerrAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyNone function as declared in fuse3/fuse_lowlevel.h:1283
func ReplyNone(req Req) {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	C.fuse_reply_none(creq)
	runtime.KeepAlive(creqAllocMap)
}

// ReplyEntry function as declared in fuse3/fuse_lowlevel.h:1298
func ReplyEntry(req Req, e []EntryParam) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	ce, ceAllocMap := unpackArgSEntryParam(e)
	__ret := C.fuse_reply_entry(creq, ce)
	packSEntryParam(e, ce)
	runtime.KeepAlive(ceAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyCreate function as declared in fuse3/fuse_lowlevel.h:1317
func ReplyCreate(req Req, e []EntryParam, fi []FileInfo) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	ce, ceAllocMap := unpackArgSEntryParam(e)
	cfi, cfiAllocMap := unpackArgSFileInfo(fi)
	__ret := C.fuse_reply_create(creq, ce, cfi)
	packSFileInfo(fi, cfi)
	runtime.KeepAlive(cfiAllocMap)
	packSEntryParam(e, ce)
	runtime.KeepAlive(ceAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyAttr function as declared in fuse3/fuse_lowlevel.h:1331
func ReplyAttr(req Req, attr []Stat, attrTimeout float64) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cattr, cattrAllocMap := unpackArgSStat(attr)
	cattrTimeout, cattrTimeoutAllocMap := (C.double)(attrTimeout), cgoAllocsUnknown
	__ret := C.fuse_reply_attr(creq, cattr, cattrTimeout)
	runtime.KeepAlive(cattrTimeoutAllocMap)
	packSStat(attr, cattr)
	runtime.KeepAlive(cattrAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyReadlink function as declared in fuse3/fuse_lowlevel.h:1344
func ReplyReadlink(req Req, link string) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	clink, clinkAllocMap := unpackPCharString(link)
	__ret := C.fuse_reply_readlink(creq, clink)
	runtime.KeepAlive(clinkAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyOpen function as declared in fuse3/fuse_lowlevel.h:1359
func ReplyOpen(req Req, fi []FileInfo) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cfi, cfiAllocMap := unpackArgSFileInfo(fi)
	__ret := C.fuse_reply_open(creq, cfi)
	packSFileInfo(fi, cfi)
	runtime.KeepAlive(cfiAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyWrite function as declared in fuse3/fuse_lowlevel.h:1371
func ReplyWrite(req Req, count uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	__ret := C.fuse_reply_write(creq, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyBuf function as declared in fuse3/fuse_lowlevel.h:1384
func ReplyBuf(req Req, buf string, size uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cbuf, cbufAllocMap := unpackPCharString(buf)
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fuse_reply_buf(creq, cbuf, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyData function as declared in fuse3/fuse_lowlevel.h:1429
func ReplyData(req Req, bufv []Bufvec, flags BufCopyFlags) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cbufv, cbufvAllocMap := unpackArgSBufvec(bufv)
	cflags, cflagsAllocMap := (C.enum_fuse_buf_copy_flags)(flags), cgoAllocsUnknown
	__ret := C.fuse_reply_data(creq, cbufv, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	packSBufvec(bufv, cbufv)
	runtime.KeepAlive(cbufvAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyIov function as declared in fuse3/fuse_lowlevel.h:1443
func ReplyIov(req Req, iov []Iovec, count int32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	ciov, ciovAllocMap := unpackArgSIovec(iov)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.fuse_reply_iov(creq, ciov, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSIovec(iov, ciov)
	runtime.KeepAlive(ciovAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyStatfs function as declared in fuse3/fuse_lowlevel.h:1455
func ReplyStatfs(req Req, stbuf []Statvfs) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cstbuf, cstbufAllocMap := unpackArgSStatvfs(stbuf)
	__ret := C.fuse_reply_statfs(creq, cstbuf)
	packSStatvfs(stbuf, cstbuf)
	runtime.KeepAlive(cstbufAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyXattr function as declared in fuse3/fuse_lowlevel.h:1467
func ReplyXattr(req Req, count uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.size_t)(count), cgoAllocsUnknown
	__ret := C.fuse_reply_xattr(creq, ccount)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyLock function as declared in fuse3/fuse_lowlevel.h:1479
func ReplyLock(req Req, lock []Flock) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	clock, clockAllocMap := unpackArgSFlock(lock)
	__ret := C.fuse_reply_lock(creq, clock)
	packSFlock(lock, clock)
	runtime.KeepAlive(clockAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyBmap function as declared in fuse3/fuse_lowlevel.h:1491
func ReplyBmap(req Req, idx uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cidx, cidxAllocMap := (C.uint64_t)(idx), cgoAllocsUnknown
	__ret := C.fuse_reply_bmap(creq, cidx)
	runtime.KeepAlive(cidxAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// AddDirentry function as declared in fuse3/fuse_lowlevel.h:1524
func AddDirentry(req Req, buf []byte, bufsize uint32, name string, stbuf []Stat, off int32) uint32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cbuf, cbufAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&buf)))
	cbufsize, cbufsizeAllocMap := (C.size_t)(bufsize), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cstbuf, cstbufAllocMap := unpackArgSStat(stbuf)
	coff, coffAllocMap := (C.off_t)(off), cgoAllocsUnknown
	__ret := C.fuse_add_direntry(creq, cbuf, cbufsize, cname, cstbuf, coff)
	runtime.KeepAlive(coffAllocMap)
	packSStat(stbuf, cstbuf)
	runtime.KeepAlive(cstbufAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cbufsizeAllocMap)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// AddDirentryPlus function as declared in fuse3/fuse_lowlevel.h:1541
func AddDirentryPlus(req Req, buf []byte, bufsize uint32, name string, e []EntryParam, off int32) uint32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cbuf, cbufAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&buf)))
	cbufsize, cbufsizeAllocMap := (C.size_t)(bufsize), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	ce, ceAllocMap := unpackArgSEntryParam(e)
	coff, coffAllocMap := (C.off_t)(off), cgoAllocsUnknown
	__ret := C.fuse_add_direntry_plus(creq, cbuf, cbufsize, cname, ce, coff)
	runtime.KeepAlive(coffAllocMap)
	packSEntryParam(e, ce)
	runtime.KeepAlive(ceAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cbufsizeAllocMap)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// ReplyIoctlRetry function as declared in fuse3/fuse_lowlevel.h:1560
func ReplyIoctlRetry(req Req, inIov []Iovec, inCount uint32, outIov []Iovec, outCount uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cinIov, cinIovAllocMap := unpackArgSIovec(inIov)
	cinCount, cinCountAllocMap := (C.size_t)(inCount), cgoAllocsUnknown
	coutIov, coutIovAllocMap := unpackArgSIovec(outIov)
	coutCount, coutCountAllocMap := (C.size_t)(outCount), cgoAllocsUnknown
	__ret := C.fuse_reply_ioctl_retry(creq, cinIov, cinCount, coutIov, coutCount)
	runtime.KeepAlive(coutCountAllocMap)
	packSIovec(outIov, coutIov)
	runtime.KeepAlive(coutIovAllocMap)
	runtime.KeepAlive(cinCountAllocMap)
	packSIovec(inIov, cinIov)
	runtime.KeepAlive(cinIovAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyIoctl function as declared in fuse3/fuse_lowlevel.h:1575
func ReplyIoctl(req Req, result int32, buf unsafe.Pointer, size uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cresult, cresultAllocMap := (C.int)(result), cgoAllocsUnknown
	cbuf, cbufAllocMap := buf, cgoAllocsUnknown
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	__ret := C.fuse_reply_ioctl(creq, cresult, cbuf, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(cresultAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyIoctlIov function as declared in fuse3/fuse_lowlevel.h:1588
func ReplyIoctlIov(req Req, result int32, iov []Iovec, count int32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	cresult, cresultAllocMap := (C.int)(result), cgoAllocsUnknown
	ciov, ciovAllocMap := unpackArgSIovec(iov)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	__ret := C.fuse_reply_ioctl_iov(creq, cresult, ciov, ccount)
	runtime.KeepAlive(ccountAllocMap)
	packSIovec(iov, ciov)
	runtime.KeepAlive(ciovAllocMap)
	runtime.KeepAlive(cresultAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyPoll function as declared in fuse3/fuse_lowlevel.h:1597
func ReplyPoll(req Req, revents uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	crevents, creventsAllocMap := (C.uint)(revents), cgoAllocsUnknown
	__ret := C.fuse_reply_poll(creq, crevents)
	runtime.KeepAlive(creventsAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReplyLseek function as declared in fuse3/fuse_lowlevel.h:1609
func ReplyLseek(req Req, off int32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	coff, coffAllocMap := (C.off_t)(off), cgoAllocsUnknown
	__ret := C.fuse_reply_lseek(creq, coff)
	runtime.KeepAlive(coffAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyPoll function as declared in fuse3/fuse_lowlevel.h:1622
func LowlevelNotifyPoll(ph []Pollhandle) int32 {
	cph, cphAllocMap := copyPStructFusePollhandleBytes((*sliceHeader)(unsafe.Pointer(&ph)))
	__ret := C.fuse_lowlevel_notify_poll(cph)
	runtime.KeepAlive(cphAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyInvalInode function as declared in fuse3/fuse_lowlevel.h:1647
func LowlevelNotifyInvalInode(se []Session, ino Ino, off int32, len int32) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cino, cinoAllocMap := (C.fuse_ino_t)(ino), cgoAllocsUnknown
	coff, coffAllocMap := (C.off_t)(off), cgoAllocsUnknown
	clen, clenAllocMap := (C.off_t)(len), cgoAllocsUnknown
	__ret := C.fuse_lowlevel_notify_inval_inode(cse, cino, coff, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(coffAllocMap)
	runtime.KeepAlive(cinoAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyInvalEntry function as declared in fuse3/fuse_lowlevel.h:1675
func LowlevelNotifyInvalEntry(se []Session, parent Ino, name string, namelen uint32) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cparent, cparentAllocMap := (C.fuse_ino_t)(parent), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cnamelen, cnamelenAllocMap := (C.size_t)(namelen), cgoAllocsUnknown
	__ret := C.fuse_lowlevel_notify_inval_entry(cse, cparent, cname, cnamelen)
	runtime.KeepAlive(cnamelenAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cparentAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyDelete function as declared in fuse3/fuse_lowlevel.h:1706
func LowlevelNotifyDelete(se []Session, parent Ino, child Ino, name string, namelen uint32) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cparent, cparentAllocMap := (C.fuse_ino_t)(parent), cgoAllocsUnknown
	cchild, cchildAllocMap := (C.fuse_ino_t)(child), cgoAllocsUnknown
	cname, cnameAllocMap := unpackPCharString(name)
	cnamelen, cnamelenAllocMap := (C.size_t)(namelen), cgoAllocsUnknown
	__ret := C.fuse_lowlevel_notify_delete(cse, cparent, cchild, cname, cnamelen)
	runtime.KeepAlive(cnamelenAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cchildAllocMap)
	runtime.KeepAlive(cparentAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyStore function as declared in fuse3/fuse_lowlevel.h:1735
func LowlevelNotifyStore(se []Session, ino Ino, offset int32, bufv []Bufvec, flags BufCopyFlags) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cino, cinoAllocMap := (C.fuse_ino_t)(ino), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.off_t)(offset), cgoAllocsUnknown
	cbufv, cbufvAllocMap := unpackArgSBufvec(bufv)
	cflags, cflagsAllocMap := (C.enum_fuse_buf_copy_flags)(flags), cgoAllocsUnknown
	__ret := C.fuse_lowlevel_notify_store(cse, cino, coffset, cbufv, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	packSBufvec(bufv, cbufv)
	runtime.KeepAlive(cbufvAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(cinoAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelNotifyRetrieve function as declared in fuse3/fuse_lowlevel.h:1767
func LowlevelNotifyRetrieve(se []Session, ino Ino, size uint32, offset int32, cookie unsafe.Pointer) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cino, cinoAllocMap := (C.fuse_ino_t)(ino), cgoAllocsUnknown
	csize, csizeAllocMap := (C.size_t)(size), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.off_t)(offset), cgoAllocsUnknown
	ccookie, ccookieAllocMap := cookie, cgoAllocsUnknown
	__ret := C.fuse_lowlevel_notify_retrieve(cse, cino, csize, coffset, ccookie)
	runtime.KeepAlive(ccookieAllocMap)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cinoAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReqUserdata function as declared in fuse3/fuse_lowlevel.h:1781
func ReqUserdata(req Req) unsafe.Pointer {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	__ret := C.fuse_req_userdata(creq)
	runtime.KeepAlive(creqAllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// ReqCtx function as declared in fuse3/fuse_lowlevel.h:1792
func ReqCtx(req Req) *Ctx {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	__ret := C.fuse_req_ctx(creq)
	runtime.KeepAlive(creqAllocMap)
	__v := NewCtxRef(unsafe.Pointer(__ret))
	return __v
}

// ReqGetgroups function as declared in fuse3/fuse_lowlevel.h:1813
func ReqGetgroups(req Req, size int32, list []uint32) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.int)(size), cgoAllocsUnknown
	clist, clistAllocMap := copyPGidBytes((*sliceHeader)(unsafe.Pointer(&list)))
	__ret := C.fuse_req_getgroups(creq, csize, clist)
	runtime.KeepAlive(clistAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ReqInterruptFunc function as declared in fuse3/fuse_lowlevel.h:1834
func ReqInterruptFunc(req Req, _func InterruptFunc, data unsafe.Pointer) {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	c_func, c_funcAllocMap := _func.PassValue()
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	C.fuse_req_interrupt_func(creq, c_func, cdata)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(c_funcAllocMap)
	runtime.KeepAlive(creqAllocMap)
}

// ReqInterrupted function as declared in fuse3/fuse_lowlevel.h:1843
func ReqInterrupted(req Req) int32 {
	creq, creqAllocMap := *(*C.fuse_req_t)(unsafe.Pointer(&req)), cgoAllocsUnknown
	__ret := C.fuse_req_interrupted(creq)
	runtime.KeepAlive(creqAllocMap)
	__v := (int32)(__ret)
	return __v
}

// LowlevelVersion function as declared in fuse3/fuse_lowlevel.h:1853
func LowlevelVersion() {
	C.fuse_lowlevel_version()
}

// LowlevelHelp function as declared in fuse3/fuse_lowlevel.h:1860
func LowlevelHelp() {
	C.fuse_lowlevel_help()
}

// CmdlineHelp function as declared in fuse3/fuse_lowlevel.h:1865
func CmdlineHelp() {
	C.fuse_cmdline_help()
}

// ParseCmdline function as declared in fuse3/fuse_lowlevel.h:1901
func ParseCmdline(args []Args, opts []CmdlineOpts) int32 {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	copts, coptsAllocMap := unpackArgSCmdlineOpts(opts)
	__ret := C.fuse_parse_cmdline(cargs, copts)
	packSCmdlineOpts(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionNew function as declared in fuse3/fuse_lowlevel.h:1932
func SessionNew(args []Args, op []LowlevelOps, opSize uint32, userdata unsafe.Pointer) *Session {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	cop, copAllocMap := unpackArgSLowlevelOps(op)
	copSize, copSizeAllocMap := (C.size_t)(opSize), cgoAllocsUnknown
	cuserdata, cuserdataAllocMap := userdata, cgoAllocsUnknown
	__ret := C.fuse_session_new(cargs, cop, copSize, cuserdata)
	runtime.KeepAlive(cuserdataAllocMap)
	runtime.KeepAlive(copSizeAllocMap)
	packSLowlevelOps(op, cop)
	runtime.KeepAlive(copAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := *(**Session)(unsafe.Pointer(&__ret))
	return __v
}

// SessionMount function as declared in fuse3/fuse_lowlevel.h:1944
func SessionMount(se []Session, mountpoint string) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cmountpoint, cmountpointAllocMap := unpackPCharString(mountpoint)
	__ret := C.fuse_session_mount(cse, cmountpoint)
	runtime.KeepAlive(cmountpointAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionLoop function as declared in fuse3/fuse_lowlevel.h:1968
func SessionLoop(se []Session) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	__ret := C.fuse_session_loop(cse)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionLoopMt31 function as declared in fuse3/fuse_lowlevel.h:1971
func SessionLoopMt31(se []Session, cloneFd int32) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	ccloneFd, ccloneFdAllocMap := (C.int)(cloneFd), cgoAllocsUnknown
	__ret := C.fuse_session_loop_mt_31(cse, ccloneFd)
	runtime.KeepAlive(ccloneFdAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionExit function as declared in fuse3/fuse_lowlevel.h:2002
func SessionExit(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.fuse_session_exit(cse)
	runtime.KeepAlive(cseAllocMap)
}

// SessionReset function as declared in fuse3/fuse_lowlevel.h:2009
func SessionReset(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.fuse_session_reset(cse)
	runtime.KeepAlive(cseAllocMap)
}

// SessionExited function as declared in fuse3/fuse_lowlevel.h:2017
func SessionExited(se []Session) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	__ret := C.fuse_session_exited(cse)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionUnmount function as declared in fuse3/fuse_lowlevel.h:2043
func SessionUnmount(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.fuse_session_unmount(cse)
	runtime.KeepAlive(cseAllocMap)
}

// SessionDestroy function as declared in fuse3/fuse_lowlevel.h:2050
func SessionDestroy(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.fuse_session_destroy(cse)
	runtime.KeepAlive(cseAllocMap)
}

// SessionFd function as declared in fuse3/fuse_lowlevel.h:2070
func SessionFd(se []Session) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	__ret := C.fuse_session_fd(cse)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SessionProcessBuf function as declared in fuse3/fuse_lowlevel.h:2080
func SessionProcessBuf(se []Session, buf []Buf) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cbuf, cbufAllocMap := unpackArgSBuf(buf)
	C.fuse_session_process_buf(cse, cbuf)
	packSBuf(buf, cbuf)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(cseAllocMap)
}

// SessionReceiveBuf function as declared in fuse3/fuse_lowlevel.h:2094
func SessionReceiveBuf(se []Session, buf []Buf) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	cbuf, cbufAllocMap := unpackArgSBuf(buf)
	__ret := C.fuse_session_receive_buf(cse, cbuf)
	packSBuf(buf, cbuf)
	runtime.KeepAlive(cbufAllocMap)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ParseConnInfoOpts function as declared in fuse3/fuse_common.h:578
func ParseConnInfoOpts(args []Args) *ConnInfoOpts {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	__ret := C.fuse_parse_conn_info_opts(cargs)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := *(**ConnInfoOpts)(unsafe.Pointer(&__ret))
	return __v
}

// ApplyConnInfoOpts function as declared in fuse3/fuse_common.h:587
func ApplyConnInfoOpts(opts []ConnInfoOpts, conn []ConnInfo) {
	copts, coptsAllocMap := copyPStructFuseConnInfoOptsBytes((*sliceHeader)(unsafe.Pointer(&opts)))
	cconn, cconnAllocMap := unpackArgSConnInfo(conn)
	C.fuse_apply_conn_info_opts(copts, cconn)
	packSConnInfo(conn, cconn)
	runtime.KeepAlive(cconnAllocMap)
	runtime.KeepAlive(coptsAllocMap)
}

// Daemonize function as declared in fuse3/fuse_common.h:596
func Daemonize(foreground int32) int32 {
	cforeground, cforegroundAllocMap := (C.int)(foreground), cgoAllocsUnknown
	__ret := C.fuse_daemonize(cforeground)
	runtime.KeepAlive(cforegroundAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Version function as declared in fuse3/fuse_common.h:603
func Version() int32 {
	__ret := C.fuse_version()
	__v := (int32)(__ret)
	return __v
}

// Pkgversion function as declared in fuse3/fuse_common.h:610
func Pkgversion() string {
	__ret := C.fuse_pkgversion()
	__v := packPCharString(__ret)
	return __v
}

// PollhandleDestroy function as declared in fuse3/fuse_common.h:617
func PollhandleDestroy(ph []Pollhandle) {
	cph, cphAllocMap := copyPStructFusePollhandleBytes((*sliceHeader)(unsafe.Pointer(&ph)))
	C.fuse_pollhandle_destroy(cph)
	runtime.KeepAlive(cphAllocMap)
}

// BufSize function as declared in fuse3/fuse_common.h:786
func BufSize(bufv []Bufvec) uint32 {
	cbufv, cbufvAllocMap := unpackArgSBufvec(bufv)
	__ret := C.fuse_buf_size(cbufv)
	packSBufvec(bufv, cbufv)
	runtime.KeepAlive(cbufvAllocMap)
	__v := (uint32)(__ret)
	return __v
}

// BufCopy function as declared in fuse3/fuse_common.h:796
func BufCopy(dst []Bufvec, src []Bufvec, flags BufCopyFlags) int32 {
	cdst, cdstAllocMap := unpackArgSBufvec(dst)
	csrc, csrcAllocMap := unpackArgSBufvec(src)
	cflags, cflagsAllocMap := (C.enum_fuse_buf_copy_flags)(flags), cgoAllocsUnknown
	__ret := C.fuse_buf_copy(cdst, csrc, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	packSBufvec(src, csrc)
	runtime.KeepAlive(csrcAllocMap)
	packSBufvec(dst, cdst)
	runtime.KeepAlive(cdstAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SetSignalHandlers function as declared in fuse3/fuse_common.h:818
func SetSignalHandlers(se []Session) int32 {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	__ret := C.fuse_set_signal_handlers(cse)
	runtime.KeepAlive(cseAllocMap)
	__v := (int32)(__ret)
	return __v
}

// RemoveSignalHandlers function as declared in fuse3/fuse_common.h:831
func RemoveSignalHandlers(se []Session) {
	cse, cseAllocMap := copyPStructFuseSessionBytes((*sliceHeader)(unsafe.Pointer(&se)))
	C.fuse_remove_signal_handlers(cse)
	runtime.KeepAlive(cseAllocMap)
}

// OptParse function as declared in fuse3/fuse_opt.h:203
func OptParse(args []Args, data unsafe.Pointer, opts []Opt, proc OptProc) int32 {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	cdata, cdataAllocMap := data, cgoAllocsUnknown
	copts, coptsAllocMap := unpackArgSOpt(opts)
	cproc, cprocAllocMap := proc.PassValue()
	__ret := C.fuse_opt_parse(cargs, cdata, copts, cproc)
	runtime.KeepAlive(cprocAllocMap)
	packSOpt(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OptAddOpt function as declared in fuse3/fuse_opt.h:213
func OptAddOpt(opts [][]byte, opt string) int32 {
	copts, coptsAllocMap := unpackArgSSByte(opts)
	copt, coptAllocMap := unpackPCharString(opt)
	__ret := C.fuse_opt_add_opt(copts, copt)
	runtime.KeepAlive(coptAllocMap)
	packSSByte(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OptAddOptEscaped function as declared in fuse3/fuse_opt.h:222
func OptAddOptEscaped(opts [][]byte, opt string) int32 {
	copts, coptsAllocMap := unpackArgSSByte(opts)
	copt, coptAllocMap := unpackPCharString(opt)
	__ret := C.fuse_opt_add_opt_escaped(copts, copt)
	runtime.KeepAlive(coptAllocMap)
	packSSByte(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OptAddArg function as declared in fuse3/fuse_opt.h:231
func OptAddArg(args []Args, arg string) int32 {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	carg, cargAllocMap := unpackPCharString(arg)
	__ret := C.fuse_opt_add_arg(cargs, carg)
	runtime.KeepAlive(cargAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OptInsertArg function as declared in fuse3/fuse_opt.h:246
func OptInsertArg(args []Args, pos int32, arg string) int32 {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg, cargAllocMap := unpackPCharString(arg)
	__ret := C.fuse_opt_insert_arg(cargs, cpos, carg)
	runtime.KeepAlive(cargAllocMap)
	runtime.KeepAlive(cposAllocMap)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// OptFreeArgs function as declared in fuse3/fuse_opt.h:255
func OptFreeArgs(args []Args) {
	cargs, cargsAllocMap := unpackArgSArgs(args)
	C.fuse_opt_free_args(cargs)
	packSArgs(args, cargs)
	runtime.KeepAlive(cargsAllocMap)
}

// OptMatch function as declared in fuse3/fuse_opt.h:265
func OptMatch(opts []Opt, opt string) int32 {
	copts, coptsAllocMap := unpackArgSOpt(opts)
	copt, coptAllocMap := unpackPCharString(opt)
	__ret := C.fuse_opt_match(copts, copt)
	runtime.KeepAlive(coptAllocMap)
	packSOpt(opts, copts)
	runtime.KeepAlive(coptsAllocMap)
	__v := (int32)(__ret)
	return __v
}

// SetLogFunc function as declared in fuse3/fuse_log.h:68
func SetLogFunc(_func LogFunc) {
	c_func, c_funcAllocMap := _func.PassValue()
	C.fuse_set_log_func(c_func)
	runtime.KeepAlive(c_funcAllocMap)
}

// Log function as declared in fuse3/fuse_log.h:76
func Log(level LogLevel, fmt string) {
	clevel, clevelAllocMap := (C.enum_fuse_log_level)(level), cgoAllocsUnknown
	cfmt, cfmtAllocMap := unpackPCharString(fmt)
	C.fuse_log(clevel, cfmt)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(clevelAllocMap)
}
